# Makefile for FBA, for use with GNU make & GCC (Cygwin/MinGW)
#
# The first pass makes sure all intermediary targets are present. The second pass updates
# any targets, if necessary. (Intermediary) targets which have their own unique rules
# are generated as required.

unexport

#
#	Flags. Uncomment any of these declarations to enable their function.
#

# Check for changes in header files
DEPEND = 1



#
#	Declare variables
#

# Specify the name of the executable file, without ".exe"
NAME = fba


ifndef	CPUTYPE
	CPUTYPE	= i686
endif

MMX	= 1

ifdef	DEBUG
	NAME := $(NAME)d
endif
ifdef	SYMBOL
	NAME := $(NAME)s
endif
ifndef UNICODE
	NAME := $(NAME)a
endif

ifeq	($(CPUTYPE),i686)
	ppro = ppro
else
	NAME := $(NAME)$(CPUTYPE)
endif



#
#	Specify paths/files
#

objdir	= obj/GNU441_WIN32/$(NAME)/
srcdir	= src/

alldir	= burn burn/atari burn/capcom burn/cave burn/cps3 burn/galaxian burn/konami burn/megadrive burn/misc burn/misc/dec0 burn/misc/post90s burn/misc/pre90s burn/neogeo burn/pgm burn/psikyo burn/sega burn/taito burn/toaplan burner burner/win32 interface interface/win32 cpu cpu/a68k cpu/arm7 cpu/hd6309 cpu/i8039 cpu/konami cpu/m68k cpu/m6502 cpu/m6800 cpu/m6805 cpu/m6809 cpu/nec cpu/s2650 cpu/sh2 cpu/z80 kaillera/client libs/libpng libs/pnglib libs/zlib generated

incdir	= $(foreach dir,$(alldir),-I$(srcdir)$(dir)) -I$(objdir)generated -I$(srcdir)mingw/include -iquote

ifdef UNICODE
# lib	= -lunicows
endif

# lib	+=	`sdl-config --libs`
lib	+=	-luser32 -lgdi32 -lcomdlg32 -lcomctl32 -lshell32 -lwinmm \
		-ladvapi32 -lsetupapi -ldxguid -lddraw -ldsound -ldinput \
		-lvfw32 -lavifil32 -lacm32 -llua51 \
		$(srcdir)/libs/pnglib/pnglib.lib \
		
drvobj	=   	d_gauntlet.o \
		\
		d_dodonpachi.o d_donpachi.o d_esprade.o d_feversos.o d_gaia.o d_guwange.o \
		d_hotdogst.o d_mazinger.o d_metmqstr.o d_pwrinst2.o d_sailormn.o d_uopoko.o \
		\
		d_cps1.o \
		\
		d_cps2.o \
		\
		d_cps3.o \
		\
		d_neogeo.o \
		\
		d_pgm.o \
		\
		d_hangon.o d_outrun.o d_sys16a.o d_sys16b.o d_sys18.o d_xbrd.o d_ybrd.o \
		\
	        d_batrider.o d_batsugun.o d_battleg.o d_bbakraid.o d_demonwld.o d_dogyuun.o d_hellfire.o d_kbash.o \
	        d_kbash2.o d_mahoudai.o d_outzone.o d_rallybik.o d_samesame.o d_shippumd.o d_snowbro2.o d_tekipaki.o \
	        d_truxton.o d_truxton2.o d_vfive.o d_vimana.o d_zerowing.o \
		\
		d_psikyo.o d_psikyosh.o \
		\
		d_88games.o d_ajax.o d_aliens.o d_blockhl.o d_bottom9.o d_contra.o d_crimfght.o d_gbusters.o \
		d_gradius3.o d_hcastle.o d_hexion.o d_mainevt.o d_parodius.o d_rollerg.o d_simpsons.o d_spy.o \
		d_surpratk.o d_thunderx.o d_tmnt.o d_twin16.o d_ultraman.o d_vendetta.o d_xmen.o \
		\
		d_bublbobl.o d_taitof2.o d_taitox.o d_taitoz.o d_taitomisc.o d_asuka.o d_darius2.o \
		\
		d_galaxian.o \
		\
		d_pacman.o \
		\
		d_4enraya.o d_1942.o d_1943.o d_airbustr.o d_ambush.o d_angelkds.o d_arabian.o d_arkanoid.o d_armedf.o \
		d_bankp.o d_baraduke.o d_bionicc.o d_blktiger.o d_blockout.o d_blueprnt.o d_bombjack.o d_commando.o \
		d_dec0.o d_dec8.o d_ddragon.o d_dotrikun.o d_epos.o d_exedexes.o d_flstory.o d_funkybee.o d_galaga.o \
		d_gberet.o d_ginganin.o d_gng.o d_gunsmoke.o d_gyruss.o d_higemaru.o d_ikki.o d_jack.o d_kangaroo.o \
		d_karnov.o d_kyugo.o d_ladybug.o d_lkage.o d_lwings.o d_madgear.o d_markham.o d_meijinsn.o d_minivdr.o \
		d_mitchell.o d_mole.o d_mrdo.o d_mrflea.o d_mystston.o d_pkunwar.o d_pooyan.o d_prehisle.o d_quizo.o \
		d_rallyx.o d_renegade.o d_retofinv.o d_route16.o d_scotrsht.o d_scregg.o d_sf.o d_skyfox.o d_skykid.o \
		d_snk68.o d_solomon.o d_sonson.o d_srumbler.o d_sys1.o d_tecmo.o d_tigerheli.o d_tigeroad.o d_toki.o \
		d_tnzs.o d_vigilant.o d_vulgus.o d_wallc.o d_wc90.o d_wwfsstar.o \
		tnzs_prot.o \
		\
		d_1945kiii.o d_aerofgt.o d_aquarium.o d_biomtoy.o d_bloodbro.o d_crospang.o d_crshrace.o d_darkseal.o \
		d_dcon.o d_deniam.o d_ddragon3.o d_diverboy.o d_drtomy.o d_egghunt.o d_esd16.o d_f1gp.o d_fstarfrc.o \
		d_funybubl.o d_fuukifg3.o d_gaiden.o d_galpanic.o d_gotcha.o d_gumbo.o d_hyperpac.o d_kaneko16.o d_m90.o \
		d_m92.o d_mcatadv.o d_midas.o d_mogura.o d_mugsmash.o d_news.o d_nmg5.o d_nmk16.o d_ohmygod.o d_pass.o \
		d_pirates.o d_powerins.o d_pushman.o d_raiden.o d_seta2.o d_shadfrce.o d_silkroad.o d_speedspn.o \
		d_suna16.o d_taotaido.o d_tumbleb.o d_unico.o d_welltris.o d_wwfwfest.o d_yunsun16.o d_zerozone.o \
		irem_cpu.o nmk004.o \
		\
		d_parent.o \
		\
		d_megadrive.o
		
depobj	:= 	main.o splash.o about.o systeminfo.o debugger.o misc_win32.o \
	   	sel.o media.o drv.o load.o run.o progress.o gameinfo.o ips_manager.o paletteviewer.o aviout.o \
	   	popup_win32.o scrn.o menu.o replay.o dynhuff.o memcard.o wave.o \
	   	inpc.o inpd.o inps.o inpcheat.o inpdipsw.o sfactd.o stated.o numdial.o res.o \
	   	cona.o localise.o roms.o support_paths.o jukebox.o menugui.o imagebutton.o pngload.o \
	   	bmp_resize.o placeholderd.o fba_kaillera.o net.o localise_gamelist.o numpluscommas.o \
	   	maphkeys.o ram_search.o ramwatch.o luaconsole.o luaengine.o luasav.o memwatch.o cheatsearch.o \
		\
		adler32.o compress.o crc32.o deflate.o gzio.o infback.o \
       		inffast.o inflate.o inftrees.o trees.o uncompr.o zutil.o \
		\
 		png.o pngerror.o pngget.o pngmem.o pngpread.o pngread.o pngrio.o pngrtran.o pngrutil.o \
 		pngset.o pngtrans.o pngwio.o pngwrite.o pngwtran.o pngwutil.o \
		\
	   	resource.o \
	   	\
	   	misc.o bzip.o unzip.o zipfn.o state.o statec.o sshot.o dat.o \
	   	cong.o conc.o gamc.o gami.o ngslotd.o favorites.o tracklst.o importer.o \
	   	\
	   	$(drvobj) \
	   	\
	   	burn.o cheat.o burn_gun.o burn_led.o hiscore.o \
	   	\
	   	sek.o zet.o vez.o eeprom.o 8255ppi.o \
	   	burn_sound.o burn_sound_c.o timer.o \
	   	burn_ym2151.o burn_ym2413.o burn_ym3526.o burn_ym3812.o burn_ym2608.o burn_ym2610.o burn_ymf278b.o \
	   	burn_ym2203.o burn_ym2612.o burn_y8950.o ay8910.o ym2151.o ym2413.o fm.o fmopl.o ymdeltat.o \
	   	dac.o ics2115.o k007232.o k051649.o k053260.o k054539.o msm5205.o msm6295.o namco_snd.o \
	   	rf5c68.o segapcm.o seibusnd.o sn76496.o upd7759.o ymf278b.o ymz280b.o x1010.o samples.o \
	   	\
	   	arm7.o arm7_intf.o hd6309.o hd6309_intf.o i8039.o konami.o konami_intf.o m6502.o m6502_intf.o \
	   	m6800.o m6800_intf.o m6805.o m6805_intf.o m6809.o m6809_intf.o nec.o s2650.o s2650_intf.o sh2.o \
	   	z80.o z80daisy.o \
	   	\
	   	interface.o \
	   	vid_interface.o vid_support.o vid_softfx.o \
	   	vid_directx_support.o vid_d3d.o vid_ddraw.o vid_ddrawfx.o vid_directx9.o \
	   	2xsai.o 2xpm.o epx.o hq2xs.o hq2xs_16.o \
	   	aud_interface.o aud_dsp.o lowpass2.o aud_dsound3.o aud_xaudio2.o \
	   	inp_interface.o inp_dinput.o \
	   	prf_interface.o prf_performance_counter.o \
	   	\
	   	cave.o cave_tile.o cave_sprite.o cave_palette.o \
	   	\
	   	cps.o cps_config.o cps_draw.o cps_mem.o cps_obj.o cps_pal.o cps_run.o \
	   	cps2_crpt.o cps_rw.o cps_scr.o cpsr.o cpsrd.o \
	   	cpst.o ctv.o ps.o ps_m.o ps_z.o qs.o qs_c.o qs_z.o \
	   	kabuki.o \
	   	\
	   	cps3run.o cps3snd.o \
	   	\
	   	neogeo.o neo_run.o neo_decrypt.o neo_text.o neo_sprite.o neo_palette.o neo_upd4990a.o \
	   	rom_save.o \
	   	\
	   	pgm_crypt.o pgm_draw.o pgm_prot.o pgm_run.o \
	   	\
	   	sys16_run.o sys16_gfx.o sys16_fd1094.o fd1089.o fd1094.o mc8123.o genesis_vid.o \
	   	\
	   	toaplan.o toa_gp9001.o toa_extratext.o toa_palette.o \
	   	\
	   	toa_bcu2.o toaplan1.o \
	   	\
	   	psikyo_tile.o psikyo_sprite.o psikyo_palette.o psikyosh_render.o \
	   	\
	   	konamiic.o k051316.o k051733.o k051960.o k052109.o k053245.o k053247.o k053251.o k053936.o k054000.o \
	   	\
	   	gal_gfx.o gal_run.o gal_sound.o gal_stars.o \
	   	\
	   	tc0110pcr.o tc0220ioc.o tc0150rod.o tc0140syt.o tc0100scn.o tc0510nio.o tc0480scp.o tc0360pri.o \
	   	tc0280grd.o pc080sn.o pc090oj.o cchip.o taito_ic.o taito.o taito_m68705.o \
	   	\
	   	tiles_generic.o \
	   	\
		megadrive.o

ifdef	DEBUG
depobj += m68kdasm.o
endif

autobj += $(depobj) burn_sound_a.o eagle_fm.o 2xsaimmx.o hq2x32.o hq3x32.o hq4x32.o superscale.o

autdep	= $(depobj:.o=.d)

a68k.o	= $(objdir)cpu/a68k/a68k.o

app_gnuc.rc = $(srcdir)generated/app_gnuc.rc
license.rtf = $(srcdir)generated/license.rtf
driverlist.h = $(srcdir)generated/driverlist.h
ctv.h	= $(srcdir)generated/ctv.h
toa_gp9001_func.h = $(srcdir)generated/toa_gp9001_func.h
neo_sprite_func.h = $(srcdir)generated/neo_sprite_func.h
cave_tile_func.h = $(srcdir)generated/cave_tile_func.h
cave_sprite_func.h = $(srcdir)generated/cave_sprite_func.h
psikyo_tile_func.h = $(srcdir)generated/psikyo_tile_func.h
build_details.h = $(srcdir)generated/build_details.h

allobj	= $(a68k.o) $(objdir)cpu/m68k/m68kcpu.o $(objdir)cpu/m68k/m68kopnz.o $(objdir)cpu/m68k/m68kopdm.o $(objdir)cpu/m68k/m68kopac.o $(objdir)cpu/m68k/m68kops.o \
	  $(foreach file,$(autobj:.o=.c), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .c,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.cpp), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .cpp,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.asm), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .asm,.o,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.rc), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .rc,.o,$(wildcard $(srcdir)$(dir)/$(file)))))))

alldep	= $(foreach file,$(autobj:.o=.c), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .c,.d,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.cpp), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .cpp,.d,$(wildcard $(srcdir)$(dir)/$(file))))))) \
	  $(foreach file,$(autobj:.o=.rc), \
		$(foreach dir,$(alldir),$(subst $(srcdir),$(objdir), \
		$(firstword $(subst .rc,.d,$(wildcard $(srcdir)$(dir)/$(file)))))))

#
#
#	Specify compiler/linker/assembler
#
#

CC	= gcc
CXX	= g++
LD	= $(CXX)
AS	= nasm

CFLAGS	 = -pipe \
	   -std=gnu99 -march=$(CPUTYPE) -O1 \
	   -mno-cygwin -mwindows \
	   -fforce-addr -finline-limit=1200 -fthread-jumps \
	   -fexpensive-optimizations \
	   -Wall -Wno-unused-parameter -Wno-long-long -Wno-sign-compare -Wno-uninitialized -Wno-unused \
	   $(DEF) $(incdir) # `sdl-config --cflags`

CXXFLAGS = -pipe \
	   -march=$(CPUTYPE) -O1 \
	   -mno-cygwin -mwindows \
	   -fforce-addr -finline-limit=1200 -fthread-jumps \
	   -fexpensive-optimizations \
	   -Wall -W -pedantic -Wshadow -Wno-unused-parameter -Wno-long-long -Wno-write-strings \
	   -Wunknown-pragmas -Wundef -Wno-conversion -Wno-missing-braces \
	   -Wuninitialized -Wpointer-arith -Wno-inline -Wno-address  -Wno-unused-value\
	   $(DEF) $(incdir) # `sdl-config --cflags`

LDFLAGS	= -static

ASFLAGS	=  -O1 -f coff -w-orphan-labels

#       D3DUtils & D3DMath need these
#       DEF     = -Dsinf=\(float\)sin -Dcosf=\(float\)cos -Dasinf=\(float\)asin -Dacosf=\(float\)acos -Dsqrtf=\(float\)sqrt

	DEF	:= -DBUILD_WIN32 -DUSE_SPEEDHACKS -DFILENAME=$(NAME) -DMMX

ifdef UNICODE
	DEF	:= $(DEF) -D_UNICODE
endif

ifdef SPECIALBUILD
	DEF	:= $(DEF) -DSPECIALBUILD=$(SPECIALBUILD)
endif

ifdef FASTCALL
	DEF	:= $(DEF) -DFASTCALL
endif

ifdef DEBUG
	CFLAGS  += -mconsole
	DEF	:= $(DEF) -DFBA_DEBUG
endif

ifdef ROM_VERIFY
	DEF	:= $(DEF) -DROM_VERIFY
endif

ifdef	SYMBOL

	CFLAGS  += -ggdb3
	ASFLAGS += -g
	DEF	:= $(DEF) -D_DEBUG

ifdef PROFILE
	CFLAGS	 += -pg
	CXXFLAGS += -pg
else
	CFLAGS	 += -fomit-frame-pointer
	CXXFLAGS += -fomit-frame-pointer
endif

else
	LDFLAGS	 += -s
endif

ifdef MMX
	CFLAGS	 += -mmmx
	CXXFLAGS += -mmmx
endif

#
#
#	Specify paths
#
#

vpath %.asm	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.cpp	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.c	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.h	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )
vpath %.rc	$(foreach dir,$(alldir),$(srcdir)$(dir)/ )

vpath %.o 	$(foreach dir,$(alldir),$(objdir)$(dir)/ )
vpath %.d 	$(foreach dir,$(alldir),$(objdir)$(dir)/ )

#
#
#	Rules
#
#

.PHONY:	all init cleandep touch clean

ifeq ($(MAKELEVEL),1)
ifdef DEPEND

all:	init $(autdep) $(autobj)
	@$(MAKE) -f makefile.mingw441 -s

else

all:	init $(autobj)
	@$(MAKE) -f makefile.mingw441 -s
endif
else

all:	$(NAME).exe

endif

#
#
#	Rule for linking the executable
#
#

ifeq ($(MAKELEVEL),2)

$(NAME).exe:	$(allobj)
	@echo
	@echo Linking executable... $(NAME).exe
	@$(LD) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(lib)

ifdef	DEBUG

#	Don't compress when making a debug build

else
ifdef	COMPRESS
	@upx --best $@
endif
endif
endif

ifeq ($(MAKELEVEL),1)
ifdef FORCE_UPDATE
$(build_details.h): FORCE
endif
endif

#
#	Generate the gamelist
#

burn.o burn.d:	driverlist.h

#
# Verify if driverlist.h needs to be updated
#

ifeq ($(MAKELEVEL),1)
ifdef FORCE_UPDATE
$(driverlist.h): FORCE
endif
endif

#
# Compile & Initialize FBA Driverlist Generator
#

$(driverlist.h): $(srcdir)scripts/driverlist_gen.cpp
	@$(CXX) -mconsole $(CXXFLAGS) $(LDFLAGS) $< -o driverlist_gen.exe
	@driverlist_gen.exe $(drvobj)
	@rm driverlist_gen.exe

#$(driverlist.h): $(drvobj) $(srcdir)scripts/gamelist.pl
#ifdef	PERL
#	$(srcdir)scripts/gamelist.pl -o $@ -l gamelist.txt \
#		$(filter %.cpp,$(foreach file,$(drvobj:.o=.cpp),$(foreach dir,$(alldir), \
#		$(firstword $(wildcard $(srcdir)$(dir)/$(file))))))
#else
#ifeq ($(MAKELEVEL),2)
#	@echo
#	@echo Warning: Perl is not available on this system.
#	@echo $@ cannot be updated or created!
#	@echo
#endif
#endif

#
#	Fix the .rc file
#

resource.o resource.d:	$(app_gnuc.rc) string.rc version.rc version.h $(build_details.h)

$(license.rtf): $(srcdir)license.txt $(srcdir)scripts/license2rtf.pl

ifdef	PERL
	@$(srcdir)scripts/license2rtf.pl $< -o $(srcdir)generated/$(@F:.rc=.rtf)
else
ifeq ($(MAKELEVEL),2)
	@echo
	@echo Warning: Perl is not available on this system.
	@echo $@ cannot be updated or created!
	@echo
endif
endif

$(app_gnuc.rc): app.rc $(license.rc) $(license.rtf) $(srcdir)scripts/fixrc.pl $(srcdir)burner/win32/resource/fba.ico $(srcdir)burner/win32/resource/about.bmp $(srcdir)burner/win32/resource/preview.bmp $(srcdir)burner/win32/resource/misc.bmp

ifdef	PERL
	@$(srcdir)scripts/fixrc.pl $< -o $@
else
ifeq ($(MAKELEVEL),2)
	@echo
	@echo Warning: Perl is not available on this system.
	@echo $@ cannot be updated or created!
	@echo
endif
endif

#
#	Generate some info on the build details
#

about.o about.d: $(build_details.h)

$(build_details.h):	$(srcdir)scripts/build_details.cpp
	@$(CXX) -mconsole $(CXXFLAGS) $(LDFLAGS) $< -o $(objdir)generated/build_details.exe
	@$(objdir)generated/build_details.exe >$@

#
#	Compile 68000 cores
#

# A68K

$(a68k.o):	fba_make68k.c
	@echo Compiling A68K MC68000 core...
	@$(CC) -mconsole $(CFLAGS) $(LDFLAGS) -DWIN32 -Wno-unused -Wno-conversion -Wno-missing-prototypes \
		-s $< -o $(subst $(srcdir),$(objdir),$(<D))/$(<F:.c=.exe)
	@$(subst $(srcdir),$(objdir),$(<D))/$(<F:.c=.exe) $(@:.o=.asm) \
		$(@D)/a68k_tab.asm 00 $(ppro)
	@echo Assembling A68K MC68000 core...
	@$(AS) $(ASFLAGS) $(@:.o=.asm) -o $@

# Musashi

$(objdir)cpu/m68k/m68kcpu.o: $(srcdir)cpu/m68k/m68kcpu.c $(objdir)generated/m68kops.h $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kcpu.c\)...
	@$(CC) $(CFLAGS) -c $(srcdir)cpu/m68k/m68kcpu.c -o $(objdir)cpu/m68k/m68kcpu.o

$(objdir)cpu/m68k/m68kops.o: $(objdir)cpu/m68k/m68kmake.exe $(objdir)generated/m68kops.h $(objdir)generated/m68kops.c $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kops.c\)...
	@$(CC) $(CFLAGS) -c $(objdir)generated/m68kops.c -o $(objdir)cpu/m68k/m68kops.o

$(objdir)cpu/m68k/m68kopac.o: $(objdir)cpu/m68k/m68kmake.exe $(objdir)generated/m68kops.h $(objdir)generated/m68kopac.c $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kopac.c\)...
	@$(CC) $(CFLAGS) -c $(objdir)generated/m68kopac.c -o $(objdir)cpu/m68k/m68kopac.o

$(objdir)cpu/m68k/m68kopdm.o: $(objdir)cpu/m68k/m68kmake.exe $(objdir)generated/m68kops.h $(objdir)generated/m68kopdm.c $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kopdm.c\)...
	@$(CC) $(CFLAGS) -c $(objdir)generated/m68kopdm.c -o $(objdir)cpu/m68k/m68kopdm.o

$(objdir)cpu/m68k/m68kopnz.o: $(objdir)cpu/m68k/m68kmake.exe $(objdir)generated/m68kops.h $(objdir)generated/m68kopnz.c $(srcdir)cpu/m68k/m68k.h $(srcdir)cpu/m68k/m68kconf.h
	@echo Compiling Musashi MC680x0 core \(m68kopnz.c\)...
	@$(CC) $(CFLAGS) -c $(objdir)generated/m68kopnz.c -o $(objdir)cpu/m68k/m68kopnz.o

$(objdir)generated/m68kops.h: $(objdir)cpu/m68k/m68kmake.exe $(srcdir)cpu/m68k/m68k_in.c
	$(objdir)/cpu/m68k/m68kmake $(objdir)generated/ $(srcdir)cpu/m68k/m68k_in.c

$(objdir)cpu/m68k/m68kmake.exe: $(srcdir)cpu/m68k/m68kmake.c
	@echo Compiling Musashi MC680x0 core \(m68kmake.c\)...
	@$(CC) $(CFLAGS) $(srcdir)cpu/m68k/m68kmake.c -o $(objdir)cpu/m68k/m68kmake.exe


#
#	Extra rules for generated header file cvt.h, needed by ctv.cpp
#

ctv.d ctv.o:	$(ctv.h)

$(ctv.h):	ctv_make.cpp
	@echo Generating $(srcdir)generated/$(@F)...
	@$(CC) -mconsole $(CXXFLAGS) $(LDFLAGS) $< \
		-o $(subst $(srcdir),$(objdir),$(<D))/$(<F:.cpp=.exe)
	@$(subst $(srcdir),$(objdir),$(<D))/$(<F:.cpp=.exe) >$@

#
#	Extra rules for generated header file toa_gp9001_func.h, needed by toa_gp9001.cpp
#

toa_gp9001.d toa_gp9001.o: $(toa_gp9001_func.h)

$(toa_gp9001_func.h):	$(srcdir)scripts/toa_gp9001_func.pl
	@$(srcdir)scripts/toa_gp9001_func.pl -o $(toa_gp9001_func.h)

#
#	Extra rules for generated header file neo_sprite_func.h, needed by neo_sprite.cpp
#

neo_sprite.d neo_sprite.o: $(neo_sprite_func.h)

$(neo_sprite_func.h):	$(srcdir)scripts/neo_sprite_func.pl
	@$(srcdir)scripts/neo_sprite_func.pl -o $(neo_sprite_func.h)

#
#	Extra rules for generated header file cave_tile_func.h, needed by cave_tile.cpp
#

cave_tile.d cave_tile.o: $(cave_tile_func.h)

$(cave_tile_func.h):	$(srcdir)scripts/cave_tile_func.pl
	@$(srcdir)scripts/cave_tile_func.pl -o $(cave_tile_func.h)

#
#	Extra rules for generated header file cave_sprite_func.h, needed by cave_sprite.cpp
#

cave_sprite.d cave_sprite.o: $(cave_sprite_func.h)

$(cave_sprite_func.h):	$(srcdir)scripts/cave_sprite_func.pl
	@$(srcdir)scripts/cave_sprite_func.pl -o $(cave_sprite_func.h)

#
#	Extra rules for generated header file psikyo_tile_func.h / psikyo_sprite_func.h, needed by psikyo_tile.cpp / psikyo_sprite.cpp
#

psikyo_tile.d psikyo_tile.o psikyosprite.d psikyo_sprite.o: $(psikyo_tile_func.h)

$(psikyo_tile_func.h):	$(srcdir)scripts/psikyo_tile_func.pl
	$(srcdir)scripts/psikyo_tile_func.pl -o $(psikyo_tile_func.h)

ifeq ($(MAKELEVEL),2)
ifdef DEPEND

include	$(alldep)

endif
endif

#
#	Generic rule for resource files
#

%.o:	%.rc
	@echo Compiling resource file $(<F)...
	@windres $(DEF) $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F) $(foreach dir,$(alldir),--include-dir $(srcdir)$(dir))

#
#	Generic rules for C/C++ files
#

ifeq ($(MAKELEVEL),1)

%.o:	%.cpp
	@echo Compiling $<...
	@$(CC) $(CXXFLAGS) -c $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.o:	%.c
	@echo Compiling $<...
	@$(CC) $(CFLAGS) -c $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.o:	%.asm
	@echo Assembling $<...
	@$(AS) $(ASFLAGS) $< -o $(subst $(srcdir),$(objdir),$(<D))/$(@F)

else

%.o:	%.c
	@echo Compiling $<...
	@$(CC) $(CFLAGS) -c $< -o $@

%.o:	%.asm
	@echo Assembling $<...
	@$(AS) $(ASFLAGS) $< -o $@

%.o:
	@echo Compiling $<...
	@$(CC) $(CXXFLAGS) -c $< -o $@

endif

#
#	Generate dependencies for C/C++ files
#

ifdef DEPEND

%.d:	%.c
	@echo Generating depend file for $<...
	@$(CC) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CXXFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.d:	%.cpp
	@echo Generating depend file for $<...
	@$(CC) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CXXFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

%.d:	%.rc
	@echo Generating depend file for $<...
	@$(CC) -MM -MT "$(subst $(srcdir),$(objdir),$(<D))/$(*F).o $(subst $(srcdir),$(objdir),$(<D))/$(@F)" -x c++ $(CXXFLAGS) $< >$(subst $(srcdir),$(objdir),$(<D))/$(@F)

endif

#
#	Phony targets
#

init:

ifdef	DEBUG
	@echo Making debug build...
else
	@echo Making normal build...
endif
	@echo
	@mkdir -p $(foreach dir, $(alldir),$(objdir)$(dir))
	@mkdir -p $(srcdir)generated

cleandep:
	@echo Removing depend files from $(objdir)...
	-@for dir in $(alldir); do rm -f $(objdir)$$dir/*.d; done

touch:
	@echo Marking all targets for $(NAME) as uptodate...
	-@touch $(NAME).exe
	-@touch -c -r $(NAME).exe $(srcdir)/generated/*
	-@for dir in $(alldir); do touch -c  -r $(NAME).exe $(objdir)$$dir/*; done

clean:
	@echo Removing all files from $(objdir)...
	-@rm -f -r $(objdir)
	-@rm -f -r $(ctv.h)

ifdef	PERL
	@echo Removing all files generated with perl scripts...
	-@rm -f -r $(app_gnuc.rc) $(driverlist)
endif


#
#	Rule to force recompilation of any target that depends on it
#

FORCE:
